// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compat.proto

package proto3tests

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TestInt32Varint struct {
	Int32 int32 `protobuf:"zigzag32,1,opt,name=Int32,proto3" json:"Int32,omitempty"`
}

func (m *TestInt32Varint) Reset()         { *m = TestInt32Varint{} }
func (m *TestInt32Varint) String() string { return proto.CompactTextString(m) }
func (*TestInt32Varint) ProtoMessage()    {}
func (*TestInt32Varint) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{0}
}
func (m *TestInt32Varint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestInt32Varint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestInt32Varint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestInt32Varint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestInt32Varint.Merge(m, src)
}
func (m *TestInt32Varint) XXX_Size() int {
	return m.Size()
}
func (m *TestInt32Varint) XXX_DiscardUnknown() {
	xxx_messageInfo_TestInt32Varint.DiscardUnknown(m)
}

var xxx_messageInfo_TestInt32Varint proto.InternalMessageInfo

func (m *TestInt32Varint) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

type TestInt32Fixed struct {
	Fixed32 uint32 `protobuf:"fixed32,1,opt,name=Fixed32,proto3" json:"Fixed32,omitempty"`
}

func (m *TestInt32Fixed) Reset()         { *m = TestInt32Fixed{} }
func (m *TestInt32Fixed) String() string { return proto.CompactTextString(m) }
func (*TestInt32Fixed) ProtoMessage()    {}
func (*TestInt32Fixed) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{1}
}
func (m *TestInt32Fixed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestInt32Fixed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestInt32Fixed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestInt32Fixed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestInt32Fixed.Merge(m, src)
}
func (m *TestInt32Fixed) XXX_Size() int {
	return m.Size()
}
func (m *TestInt32Fixed) XXX_DiscardUnknown() {
	xxx_messageInfo_TestInt32Fixed.DiscardUnknown(m)
}

var xxx_messageInfo_TestInt32Fixed proto.InternalMessageInfo

func (m *TestInt32Fixed) GetFixed32() uint32 {
	if m != nil {
		return m.Fixed32
	}
	return 0
}

type Test32 struct {
	Foo uint32 `protobuf:"fixed32,1,opt,name=foo,proto3" json:"foo,omitempty"`
	Bar int32  `protobuf:"zigzag32,2,opt,name=bar,proto3" json:"bar,omitempty"`
}

func (m *Test32) Reset()         { *m = Test32{} }
func (m *Test32) String() string { return proto.CompactTextString(m) }
func (*Test32) ProtoMessage()    {}
func (*Test32) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{2}
}
func (m *Test32) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Test32) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Test32.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Test32) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test32.Merge(m, src)
}
func (m *Test32) XXX_Size() int {
	return m.Size()
}
func (m *Test32) XXX_DiscardUnknown() {
	xxx_messageInfo_Test32.DiscardUnknown(m)
}

var xxx_messageInfo_Test32 proto.InternalMessageInfo

func (m *Test32) GetFoo() uint32 {
	if m != nil {
		return m.Foo
	}
	return 0
}

func (m *Test32) GetBar() int32 {
	if m != nil {
		return m.Bar
	}
	return 0
}

type TestFixedInt64 struct {
	Int64 uint64 `protobuf:"fixed64,1,opt,name=Int64,proto3" json:"Int64,omitempty"`
}

func (m *TestFixedInt64) Reset()         { *m = TestFixedInt64{} }
func (m *TestFixedInt64) String() string { return proto.CompactTextString(m) }
func (*TestFixedInt64) ProtoMessage()    {}
func (*TestFixedInt64) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{3}
}
func (m *TestFixedInt64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestFixedInt64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestFixedInt64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestFixedInt64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestFixedInt64.Merge(m, src)
}
func (m *TestFixedInt64) XXX_Size() int {
	return m.Size()
}
func (m *TestFixedInt64) XXX_DiscardUnknown() {
	xxx_messageInfo_TestFixedInt64.DiscardUnknown(m)
}

var xxx_messageInfo_TestFixedInt64 proto.InternalMessageInfo

func (m *TestFixedInt64) GetInt64() uint64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

type TestSFixedSInt64 struct {
	SInt64 int64 `protobuf:"fixed64,1,opt,name=SInt64,proto3" json:"SInt64,omitempty"`
}

func (m *TestSFixedSInt64) Reset()         { *m = TestSFixedSInt64{} }
func (m *TestSFixedSInt64) String() string { return proto.CompactTextString(m) }
func (*TestSFixedSInt64) ProtoMessage()    {}
func (*TestSFixedSInt64) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{4}
}
func (m *TestSFixedSInt64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSFixedSInt64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSFixedSInt64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSFixedSInt64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSFixedSInt64.Merge(m, src)
}
func (m *TestSFixedSInt64) XXX_Size() int {
	return m.Size()
}
func (m *TestSFixedSInt64) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSFixedSInt64.DiscardUnknown(m)
}

var xxx_messageInfo_TestSFixedSInt64 proto.InternalMessageInfo

func (m *TestSFixedSInt64) GetSInt64() int64 {
	if m != nil {
		return m.SInt64
	}
	return 0
}

type EmbeddedStruct struct {
	SomethingFixedLen int64 `protobuf:"fixed64,1,opt,name=somethingFixedLen,proto3" json:"somethingFixedLen,omitempty"`
}

func (m *EmbeddedStruct) Reset()         { *m = EmbeddedStruct{} }
func (m *EmbeddedStruct) String() string { return proto.CompactTextString(m) }
func (*EmbeddedStruct) ProtoMessage()    {}
func (*EmbeddedStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{5}
}
func (m *EmbeddedStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmbeddedStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmbeddedStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmbeddedStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmbeddedStruct.Merge(m, src)
}
func (m *EmbeddedStruct) XXX_Size() int {
	return m.Size()
}
func (m *EmbeddedStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EmbeddedStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EmbeddedStruct proto.InternalMessageInfo

func (m *EmbeddedStruct) GetSomethingFixedLen() int64 {
	if m != nil {
		return m.SomethingFixedLen
	}
	return 0
}

type SomeStruct struct {
	// proto3 autom. turns this into a pointer ...
	Emb *EmbeddedStruct `protobuf:"bytes,1,opt,name=emb,proto3" json:"emb,omitempty"`
}

func (m *SomeStruct) Reset()         { *m = SomeStruct{} }
func (m *SomeStruct) String() string { return proto.CompactTextString(m) }
func (*SomeStruct) ProtoMessage()    {}
func (*SomeStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{6}
}
func (m *SomeStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SomeStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SomeStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SomeStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SomeStruct.Merge(m, src)
}
func (m *SomeStruct) XXX_Size() int {
	return m.Size()
}
func (m *SomeStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_SomeStruct.DiscardUnknown(m)
}

var xxx_messageInfo_SomeStruct proto.InternalMessageInfo

func (m *SomeStruct) GetEmb() *EmbeddedStruct {
	if m != nil {
		return m.Emb
	}
	return nil
}

type ProtoGotTime struct {
	T *types.Timestamp `protobuf:"bytes,1,opt,name=T,proto3" json:"T,omitempty"`
}

func (m *ProtoGotTime) Reset()         { *m = ProtoGotTime{} }
func (m *ProtoGotTime) String() string { return proto.CompactTextString(m) }
func (*ProtoGotTime) ProtoMessage()    {}
func (*ProtoGotTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{7}
}
func (m *ProtoGotTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoGotTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoGotTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoGotTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoGotTime.Merge(m, src)
}
func (m *ProtoGotTime) XXX_Size() int {
	return m.Size()
}
func (m *ProtoGotTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoGotTime.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoGotTime proto.InternalMessageInfo

func (m *ProtoGotTime) GetT() *types.Timestamp {
	if m != nil {
		return m.T
	}
	return nil
}

type TestInt32 struct {
	Int32 int32 `protobuf:"varint,1,opt,name=Int32,proto3" json:"Int32,omitempty"`
}

func (m *TestInt32) Reset()         { *m = TestInt32{} }
func (m *TestInt32) String() string { return proto.CompactTextString(m) }
func (*TestInt32) ProtoMessage()    {}
func (*TestInt32) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{8}
}
func (m *TestInt32) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestInt32) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestInt32.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestInt32) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestInt32.Merge(m, src)
}
func (m *TestInt32) XXX_Size() int {
	return m.Size()
}
func (m *TestInt32) XXX_DiscardUnknown() {
	xxx_messageInfo_TestInt32.DiscardUnknown(m)
}

var xxx_messageInfo_TestInt32 proto.InternalMessageInfo

func (m *TestInt32) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

type TestInts struct {
	Int32 int32 `protobuf:"varint,1,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Int64 int64 `protobuf:"varint,2,opt,name=Int64,proto3" json:"Int64,omitempty"`
}

func (m *TestInts) Reset()         { *m = TestInts{} }
func (m *TestInts) String() string { return proto.CompactTextString(m) }
func (*TestInts) ProtoMessage()    {}
func (*TestInts) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{9}
}
func (m *TestInts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestInts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestInts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestInts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestInts.Merge(m, src)
}
func (m *TestInts) XXX_Size() int {
	return m.Size()
}
func (m *TestInts) XXX_DiscardUnknown() {
	xxx_messageInfo_TestInts.DiscardUnknown(m)
}

var xxx_messageInfo_TestInts proto.InternalMessageInfo

func (m *TestInts) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

func (m *TestInts) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

type IntDef struct {
	Val int64 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *IntDef) Reset()         { *m = IntDef{} }
func (m *IntDef) String() string { return proto.CompactTextString(m) }
func (*IntDef) ProtoMessage()    {}
func (*IntDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{10}
}
func (m *IntDef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntDef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntDef.Merge(m, src)
}
func (m *IntDef) XXX_Size() int {
	return m.Size()
}
func (m *IntDef) XXX_DiscardUnknown() {
	xxx_messageInfo_IntDef.DiscardUnknown(m)
}

var xxx_messageInfo_IntDef proto.InternalMessageInfo

func (m *IntDef) GetVal() int64 {
	if m != nil {
		return m.Val
	}
	return 0
}

type IntArr struct {
	Val []int64 `protobuf:"varint,1,rep,packed,name=val,proto3" json:"val,omitempty"`
}

func (m *IntArr) Reset()         { *m = IntArr{} }
func (m *IntArr) String() string { return proto.CompactTextString(m) }
func (*IntArr) ProtoMessage()    {}
func (*IntArr) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{11}
}
func (m *IntArr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntArr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntArr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntArr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntArr.Merge(m, src)
}
func (m *IntArr) XXX_Size() int {
	return m.Size()
}
func (m *IntArr) XXX_DiscardUnknown() {
	xxx_messageInfo_IntArr.DiscardUnknown(m)
}

var xxx_messageInfo_IntArr proto.InternalMessageInfo

func (m *IntArr) GetVal() []int64 {
	if m != nil {
		return m.Val
	}
	return nil
}

type PrimitivesStruct struct {
	Int32  int32 `protobuf:"varint,3,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Int64  int64 `protobuf:"varint,4,opt,name=Int64,proto3" json:"Int64,omitempty"`
	Varint int64 `protobuf:"varint,5,opt,name=Varint,proto3" json:"Varint,omitempty"`
	// int     int
	// Byte    byte = 4; // this just another varint
	// Uint8   uint8 // another varint
	// Uint16  uint16 // another one, also the following
	// Uint32  uint32
	// Uint64  uint64
	// Uvarint uint64 `binary:"varint"`
	// Uint    uint
	String_ string           `protobuf:"bytes,14,opt,name=String,proto3" json:"String,omitempty"`
	Bytes   []byte           `protobuf:"bytes,15,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Time    *types.Timestamp `protobuf:"bytes,16,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (m *PrimitivesStruct) Reset()         { *m = PrimitivesStruct{} }
func (m *PrimitivesStruct) String() string { return proto.CompactTextString(m) }
func (*PrimitivesStruct) ProtoMessage()    {}
func (*PrimitivesStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{12}
}
func (m *PrimitivesStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitivesStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitivesStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitivesStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitivesStruct.Merge(m, src)
}
func (m *PrimitivesStruct) XXX_Size() int {
	return m.Size()
}
func (m *PrimitivesStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitivesStruct.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitivesStruct proto.InternalMessageInfo

func (m *PrimitivesStruct) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

func (m *PrimitivesStruct) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *PrimitivesStruct) GetVarint() int64 {
	if m != nil {
		return m.Varint
	}
	return 0
}

func (m *PrimitivesStruct) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func (m *PrimitivesStruct) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *PrimitivesStruct) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type PrimitivesStructSl struct {
	Structs []*PrimitivesStruct `protobuf:"bytes,1,rep,name=Structs,proto3" json:"Structs,omitempty"`
}

func (m *PrimitivesStructSl) Reset()         { *m = PrimitivesStructSl{} }
func (m *PrimitivesStructSl) String() string { return proto.CompactTextString(m) }
func (*PrimitivesStructSl) ProtoMessage()    {}
func (*PrimitivesStructSl) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{13}
}
func (m *PrimitivesStructSl) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimitivesStructSl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimitivesStructSl.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimitivesStructSl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimitivesStructSl.Merge(m, src)
}
func (m *PrimitivesStructSl) XXX_Size() int {
	return m.Size()
}
func (m *PrimitivesStructSl) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimitivesStructSl.DiscardUnknown(m)
}

var xxx_messageInfo_PrimitivesStructSl proto.InternalMessageInfo

func (m *PrimitivesStructSl) GetStructs() []*PrimitivesStruct {
	if m != nil {
		return m.Structs
	}
	return nil
}

type AminoRegisteredAny struct {
	// Prefix or Disfix (Prefix + Disamb) bytes
	AminoPreOrDisfix []byte `protobuf:"bytes,1,opt,name=AminoPreOrDisfix,proto3" json:"AminoPreOrDisfix,omitempty"`
	// Must be a valid serialized protocol buffer with the above specified amino pre-/disfix.
	Value []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *AminoRegisteredAny) Reset()         { *m = AminoRegisteredAny{} }
func (m *AminoRegisteredAny) String() string { return proto.CompactTextString(m) }
func (*AminoRegisteredAny) ProtoMessage()    {}
func (*AminoRegisteredAny) Descriptor() ([]byte, []int) {
	return fileDescriptor_bced3ff93dcaa7f8, []int{14}
}
func (m *AminoRegisteredAny) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AminoRegisteredAny) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AminoRegisteredAny.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AminoRegisteredAny) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AminoRegisteredAny.Merge(m, src)
}
func (m *AminoRegisteredAny) XXX_Size() int {
	return m.Size()
}
func (m *AminoRegisteredAny) XXX_DiscardUnknown() {
	xxx_messageInfo_AminoRegisteredAny.DiscardUnknown(m)
}

var xxx_messageInfo_AminoRegisteredAny proto.InternalMessageInfo

func (m *AminoRegisteredAny) GetAminoPreOrDisfix() []byte {
	if m != nil {
		return m.AminoPreOrDisfix
	}
	return nil
}

func (m *AminoRegisteredAny) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*TestInt32Varint)(nil), "proto3tests.TestInt32Varint")
	proto.RegisterType((*TestInt32Fixed)(nil), "proto3tests.TestInt32Fixed")
	proto.RegisterType((*Test32)(nil), "proto3tests.Test32")
	proto.RegisterType((*TestFixedInt64)(nil), "proto3tests.TestFixedInt64")
	proto.RegisterType((*TestSFixedSInt64)(nil), "proto3tests.TestSFixedSInt64")
	proto.RegisterType((*EmbeddedStruct)(nil), "proto3tests.EmbeddedStruct")
	proto.RegisterType((*SomeStruct)(nil), "proto3tests.SomeStruct")
	proto.RegisterType((*ProtoGotTime)(nil), "proto3tests.ProtoGotTime")
	proto.RegisterType((*TestInt32)(nil), "proto3tests.TestInt32")
	proto.RegisterType((*TestInts)(nil), "proto3tests.TestInts")
	proto.RegisterType((*IntDef)(nil), "proto3tests.IntDef")
	proto.RegisterType((*IntArr)(nil), "proto3tests.IntArr")
	proto.RegisterType((*PrimitivesStruct)(nil), "proto3tests.PrimitivesStruct")
	proto.RegisterType((*PrimitivesStructSl)(nil), "proto3tests.PrimitivesStructSl")
	proto.RegisterType((*AminoRegisteredAny)(nil), "proto3tests.AminoRegisteredAny")
}

func init() { proto.RegisterFile("compat.proto", fileDescriptor_bced3ff93dcaa7f8) }

var fileDescriptor_bced3ff93dcaa7f8 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x5f, 0x6b, 0x1a, 0x4d,
	0x14, 0xc6, 0xb3, 0xef, 0x26, 0xfa, 0xe6, 0x28, 0x66, 0x33, 0x94, 0xb2, 0x58, 0xba, 0xb5, 0x73,
	0xd1, 0x8a, 0xa4, 0x1b, 0xd0, 0x60, 0x0b, 0x85, 0x82, 0x21, 0x6d, 0x11, 0x5a, 0x2a, 0xb3, 0xe2,
	0xfd, 0x1a, 0x47, 0x3b, 0xe0, 0xee, 0xc8, 0xcc, 0x18, 0x92, 0x6f, 0xd1, 0x0f, 0xd3, 0x0f, 0xd1,
	0xcb, 0x5c, 0xf6, 0xb2, 0xe8, 0x17, 0x29, 0xf3, 0x67, 0x35, 0x26, 0x81, 0x5e, 0x79, 0x9e, 0x73,
	0x7e, 0x67, 0x66, 0xf6, 0x79, 0x84, 0xea, 0x25, 0xcf, 0x16, 0xa9, 0x8a, 0x17, 0x82, 0x2b, 0x8e,
	0x2a, 0xe6, 0xa7, 0xa3, 0xa8, 0x54, 0xb2, 0xfe, 0x62, 0xc6, 0xf9, 0x6c, 0x4e, 0x4f, 0x4d, 0x6f,
	0xbc, 0x9c, 0x9e, 0x2a, 0x96, 0x51, 0xa9, 0xd2, 0x6c, 0x61, 0x69, 0xfc, 0x1a, 0x8e, 0x86, 0x54,
	0xaa, 0x7e, 0xae, 0x3a, 0xed, 0x51, 0x2a, 0x58, 0xae, 0xd0, 0x13, 0x38, 0x30, 0x32, 0xf4, 0x1a,
	0x5e, 0xf3, 0x98, 0x58, 0x81, 0x5b, 0x50, 0xdb, 0x80, 0x9f, 0xd8, 0x35, 0x9d, 0xa0, 0x10, 0xca,
	0xa6, 0x70, 0x64, 0x99, 0x14, 0x12, 0x9f, 0x40, 0x49, 0xb3, 0x9d, 0x36, 0x0a, 0xc0, 0x9f, 0x72,
	0xee, 0xe6, 0xba, 0xd4, 0x9d, 0x71, 0x2a, 0xc2, 0xff, 0xcc, 0xd9, 0xba, 0xc4, 0xaf, 0xec, 0xc9,
	0x66, 0xb9, 0x9f, 0xab, 0xee, 0x99, 0x7b, 0x41, 0xf7, 0xcc, 0xec, 0x95, 0x88, 0x15, 0xb8, 0x05,
	0x81, 0xe6, 0x12, 0x03, 0x26, 0x96, 0x7c, 0x0a, 0xa5, 0x64, 0x8b, 0x06, 0xc4, 0x29, 0xfc, 0x01,
	0x6a, 0x1f, 0xb3, 0x31, 0x9d, 0x4c, 0xe8, 0x24, 0x51, 0x62, 0x79, 0xa9, 0xd0, 0x09, 0x1c, 0x4b,
	0x9e, 0x51, 0xf5, 0x9d, 0xe5, 0x33, 0x73, 0xc2, 0x17, 0x9a, 0xbb, 0xa5, 0x87, 0x03, 0xfc, 0x1e,
	0x20, 0xe1, 0x19, 0x75, 0xbb, 0x6f, 0xc0, 0xa7, 0xd9, 0xd8, 0xd0, 0x95, 0xf6, 0xb3, 0xf8, 0x8e,
	0xc1, 0xf1, 0xee, 0x2d, 0x44, 0x73, 0xf8, 0x1d, 0x54, 0x07, 0x1a, 0xf9, 0xcc, 0xd5, 0x90, 0x65,
	0x14, 0x35, 0xc1, 0x1b, 0xba, 0xe5, 0x7a, 0x6c, 0x03, 0x89, 0x8b, 0x40, 0xe2, 0x61, 0x11, 0x08,
	0xf1, 0x86, 0xf8, 0x25, 0x1c, 0x6e, 0x4c, 0xde, 0xcd, 0xe1, 0xa0, 0xc8, 0xa1, 0x0b, 0xff, 0x3b,
	0x44, 0x3e, 0x4e, 0x6c, 0xdd, 0xd3, 0x1e, 0xfb, 0x85, 0x7b, 0x75, 0x28, 0xf5, 0x73, 0x75, 0x41,
	0xa7, 0x3a, 0x81, 0xab, 0x74, 0x6e, 0x76, 0x7c, 0xa2, 0x4b, 0x37, 0xeb, 0x09, 0xb1, 0x9d, 0xf9,
	0xc5, 0xec, 0xa7, 0x07, 0xc1, 0x40, 0xb0, 0x8c, 0x29, 0x76, 0x45, 0xa5, 0x33, 0x64, 0x73, 0xb1,
	0xff, 0xe8, 0xc5, 0xfb, 0x77, 0x2e, 0xd6, 0x11, 0xd9, 0x3f, 0x56, 0x78, 0x60, 0xda, 0x4e, 0x99,
	0xe8, 0x94, 0x60, 0xf9, 0x2c, 0xac, 0x35, 0xbc, 0xe6, 0x21, 0x71, 0x4a, 0x9f, 0x72, 0x7e, 0xa3,
	0xa8, 0x0c, 0x8f, 0x1a, 0x5e, 0xb3, 0x4a, 0xac, 0x40, 0x31, 0xec, 0x6b, 0xa7, 0xc2, 0xe0, 0x9f,
	0x36, 0x1a, 0x0e, 0x7f, 0x05, 0x74, 0xff, 0xd5, 0xc9, 0x1c, 0xbd, 0x85, 0xb2, 0xad, 0xa5, 0xf9,
	0xc4, 0x4a, 0xfb, 0xf9, 0x4e, 0x98, 0xf7, 0x37, 0x48, 0x41, 0xe3, 0x11, 0xa0, 0x5e, 0xc6, 0x72,
	0x4e, 0xe8, 0x8c, 0x49, 0x45, 0x05, 0x9d, 0xf4, 0xf2, 0x1b, 0xd4, 0x82, 0xc0, 0x74, 0x07, 0x82,
	0x7e, 0x13, 0x17, 0x4c, 0x4e, 0xd9, 0xb5, 0xb1, 0xb5, 0x4a, 0x1e, 0xf4, 0xf5, 0x67, 0x8d, 0xd2,
	0xf9, 0x92, 0x9a, 0x54, 0xaa, 0xc4, 0x8a, 0xf3, 0xf0, 0xd7, 0x2a, 0xf2, 0x6e, 0x57, 0x91, 0xf7,
	0x67, 0x15, 0x79, 0x3f, 0xd6, 0xd1, 0xde, 0xed, 0x3a, 0xda, 0xfb, 0xbd, 0x8e, 0xf6, 0xc6, 0x25,
	0xfb, 0xb0, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xdc, 0x1c, 0x1e, 0xdd, 0x03, 0x00, 0x00,
}

func (m *TestInt32Varint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestInt32Varint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Int32 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompat(dAtA, i, uint64((uint32(m.Int32)<<1)^uint32((m.Int32>>31))))
	}
	return i, nil
}

func (m *TestInt32Fixed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestInt32Fixed) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fixed32 != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Fixed32))
		i += 4
	}
	return i, nil
}

func (m *Test32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Test32) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Foo != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Foo))
		i += 4
	}
	if m.Bar != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompat(dAtA, i, uint64((uint32(m.Bar)<<1)^uint32((m.Bar>>31))))
	}
	return i, nil
}

func (m *TestFixedInt64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestFixedInt64) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Int64 != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Int64))
		i += 8
	}
	return i, nil
}

func (m *TestSFixedSInt64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSFixedSInt64) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SInt64 != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SInt64))
		i += 8
	}
	return i, nil
}

func (m *EmbeddedStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmbeddedStruct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SomethingFixedLen != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SomethingFixedLen))
		i += 8
	}
	return i, nil
}

func (m *SomeStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SomeStruct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Emb != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.Emb.Size()))
		n1, err := m.Emb.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ProtoGotTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoGotTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.T != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.T.Size()))
		n2, err := m.T.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *TestInt32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestInt32) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Int32 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.Int32))
	}
	return i, nil
}

func (m *TestInts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestInts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Int32 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.Int32))
	}
	if m.Int64 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.Int64))
	}
	return i, nil
}

func (m *IntDef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntDef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Val != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.Val))
	}
	return i, nil
}

func (m *IntArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Val) > 0 {
		dAtA4 := make([]byte, len(m.Val)*10)
		var j3 int
		for _, num1 := range m.Val {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompat(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *PrimitivesStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitivesStruct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Int32 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.Int32))
	}
	if m.Int64 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.Int64))
	}
	if m.Varint != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.Varint))
	}
	if len(m.String_) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintCompat(dAtA, i, uint64(len(m.String_)))
		i += copy(dAtA[i:], m.String_)
	}
	if len(m.Bytes) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintCompat(dAtA, i, uint64(len(m.Bytes)))
		i += copy(dAtA[i:], m.Bytes)
	}
	if m.Time != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCompat(dAtA, i, uint64(m.Time.Size()))
		n5, err := m.Time.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *PrimitivesStructSl) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimitivesStructSl) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Structs) > 0 {
		for _, msg := range m.Structs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCompat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AminoRegisteredAny) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AminoRegisteredAny) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AminoPreOrDisfix) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompat(dAtA, i, uint64(len(m.AminoPreOrDisfix)))
		i += copy(dAtA[i:], m.AminoPreOrDisfix)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompat(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func encodeVarintCompat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestInt32Varint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int32 != 0 {
		n += 1 + sozCompat(uint64(m.Int32))
	}
	return n
}

func (m *TestInt32Fixed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fixed32 != 0 {
		n += 5
	}
	return n
}

func (m *Test32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Foo != 0 {
		n += 5
	}
	if m.Bar != 0 {
		n += 1 + sozCompat(uint64(m.Bar))
	}
	return n
}

func (m *TestFixedInt64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int64 != 0 {
		n += 9
	}
	return n
}

func (m *TestSFixedSInt64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SInt64 != 0 {
		n += 9
	}
	return n
}

func (m *EmbeddedStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SomethingFixedLen != 0 {
		n += 9
	}
	return n
}

func (m *SomeStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Emb != nil {
		l = m.Emb.Size()
		n += 1 + l + sovCompat(uint64(l))
	}
	return n
}

func (m *ProtoGotTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != nil {
		l = m.T.Size()
		n += 1 + l + sovCompat(uint64(l))
	}
	return n
}

func (m *TestInt32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int32 != 0 {
		n += 1 + sovCompat(uint64(m.Int32))
	}
	return n
}

func (m *TestInts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int32 != 0 {
		n += 1 + sovCompat(uint64(m.Int32))
	}
	if m.Int64 != 0 {
		n += 1 + sovCompat(uint64(m.Int64))
	}
	return n
}

func (m *IntDef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Val != 0 {
		n += 1 + sovCompat(uint64(m.Val))
	}
	return n
}

func (m *IntArr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Val) > 0 {
		l = 0
		for _, e := range m.Val {
			l += sovCompat(uint64(e))
		}
		n += 1 + sovCompat(uint64(l)) + l
	}
	return n
}

func (m *PrimitivesStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int32 != 0 {
		n += 1 + sovCompat(uint64(m.Int32))
	}
	if m.Int64 != 0 {
		n += 1 + sovCompat(uint64(m.Int64))
	}
	if m.Varint != 0 {
		n += 1 + sovCompat(uint64(m.Varint))
	}
	l = len(m.String_)
	if l > 0 {
		n += 1 + l + sovCompat(uint64(l))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovCompat(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 2 + l + sovCompat(uint64(l))
	}
	return n
}

func (m *PrimitivesStructSl) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Structs) > 0 {
		for _, e := range m.Structs {
			l = e.Size()
			n += 1 + l + sovCompat(uint64(l))
		}
	}
	return n
}

func (m *AminoRegisteredAny) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AminoPreOrDisfix)
	if l > 0 {
		n += 1 + l + sovCompat(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCompat(uint64(l))
	}
	return n
}

func sovCompat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCompat(x uint64) (n int) {
	return sovCompat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestInt32Varint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestInt32Varint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestInt32Varint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Int32 = v
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestInt32Fixed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestInt32Fixed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestInt32Fixed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32", wireType)
			}
			m.Fixed32 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixed32 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Test32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Test32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Test32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Foo", wireType)
			}
			m.Foo = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Foo = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bar", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Bar = v
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestFixedInt64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestFixedInt64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestFixedInt64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Int64 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSFixedSInt64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSFixedSInt64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSFixedSInt64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SInt64", wireType)
			}
			m.SInt64 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SInt64 = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmbeddedStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmbeddedStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmbeddedStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SomethingFixedLen", wireType)
			}
			m.SomethingFixedLen = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SomethingFixedLen = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SomeStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SomeStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SomeStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Emb == nil {
				m.Emb = &EmbeddedStruct{}
			}
			if err := m.Emb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoGotTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoGotTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoGotTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.T == nil {
				m.T = &types.Timestamp{}
			}
			if err := m.T.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestInt32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestInt32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestInt32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			m.Int32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestInts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestInts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestInts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			m.Int32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntDef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntDef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntDef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			m.Val = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Val |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCompat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Val = append(m.Val, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCompat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCompat
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCompat
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Val) == 0 {
					m.Val = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCompat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Val = append(m.Val, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitivesStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitivesStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitivesStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			m.Int32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Varint", wireType)
			}
			m.Varint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Varint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrimitivesStructSl) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimitivesStructSl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimitivesStructSl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Structs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Structs = append(m.Structs, &PrimitivesStruct{})
			if err := m.Structs[len(m.Structs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AminoRegisteredAny) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AminoRegisteredAny: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AminoRegisteredAny: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AminoPreOrDisfix", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AminoPreOrDisfix = append(m.AminoPreOrDisfix[:0], dAtA[iNdEx:postIndex]...)
			if m.AminoPreOrDisfix == nil {
				m.AminoPreOrDisfix = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCompat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCompat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCompat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCompat
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCompat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCompat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCompat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCompat
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCompat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompat   = fmt.Errorf("proto: integer overflow")
)
